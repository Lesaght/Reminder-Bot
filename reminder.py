import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, ConversationHandler, \
    MessageHandler, Filters

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

REMINDER_TEXT, TIME_SELECTION = range(2)

TIME_OPTIONS = [
    [
        InlineKeyboardButton("10 –º–∏–Ω", callback_data='10'),
        InlineKeyboardButton("30 –º–∏–Ω", callback_data='30'),
        InlineKeyboardButton("1 —á–∞—Å", callback_data='60')
    ],
    [
        InlineKeyboardButton("3 —á–∞—Å–∞", callback_data='180'),
        InlineKeyboardButton("6 —á–∞—Å–æ–≤", callback_data='360'),
        InlineKeyboardButton("12 —á–∞—Å–æ–≤", callback_data='720')
    ],
    [
        InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data='1440'),
        InlineKeyboardButton("3 –¥–Ω—è", callback_data='4320'),
        InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚úèÔ∏è", callback_data='custom')
    ],
    [
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
    ]
]


def format_duration(minutes: int) -> str:
    days = minutes // 1440
    hours = (minutes % 1440) // 60
    mins = minutes % 60
    parts = []
    if days > 0:
        parts.append(f"{days} –¥–Ω")
    if hours > 0:
        parts.append(f"{hours} —á–∞—Å")
    if mins > 0 and days == 0:
        parts.append(f"{mins} –º–∏–Ω")
    return " ".join(parts) if parts else "0 –º–∏–Ω"


def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –í–≤–µ–¥–∏ —Å—é–¥–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—èüëá")
    return REMINDER_TEXT


def get_reminder_text(update: Update, context: CallbackContext) -> int:
    context.user_data['reminder_text'] = update.message.text
    keyboard = InlineKeyboardMarkup(TIME_OPTIONS)
    update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ß–ß:–ú–ú]:", reply_markup=keyboard)
    return TIME_SELECTION


def time_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()

    if query.data == 'custom':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]])
        query.edit_message_text(
            "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 02:30) –∏–ª–∏ –∫–∞–∫ <b>1–¥ 2—á 30–º</b>:",
            parse_mode='HTML',
            reply_markup=keyboard
        )
        return TIME_SELECTION

    elif query.data == 'back':
        query.edit_message_text(text="–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=None)
        return REMINDER_TEXT

    elif query.data == 'cancel':
        return cancel(update, context)

    else:
        selected_minutes = int(query.data)
        schedule_reminder(update, context, selected_minutes)
        return ConversationHandler.END


def manual_time_input(update: Update, context: CallbackContext) -> int:
    user_input = update.message.text.strip().lower()
    minutes = 0

    try:
        if '–¥' in user_input or '—á' in user_input or '–º' in user_input:
            parts = user_input.split()
            for part in parts:
                if '–¥' in part:
                    minutes += int(part.replace('–¥', '')) * 1440
                elif '—á' in part:
                    minutes += int(part.replace('—á', '')) * 60
                elif '–º' in part:
                    minutes += int(part.replace('–º', ''))
        elif ':' in user_input:
            hours, mins = map(int, user_input.split(':'))
            minutes = hours * 60 + mins
        else:
            raise ValueError
    except:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return TIME_SELECTION

    schedule_reminder(update, context, minutes)
    return ConversationHandler.END


def schedule_reminder(update: Update, context: CallbackContext, minutes: int):
    chat_id = update.effective_chat.id
    text = context.user_data.get('reminder_text', '')
    due = minutes * 60

    context.job_queue.run_once(
        send_reminder,
        due,
        context={'chat_id': chat_id, 'text': text}
    )

    formatted_time = format_duration(minutes)
    update.effective_message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {formatted_time}!")


def send_reminder(context: CallbackContext) -> None:
    job = context.job
    context.bot.send_message(job.context['chat_id'], text=f'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job.context["text"]}')


def cancel(update: Update, context: CallbackContext) -> int:
    if update.callback_query:
        update.callback_query.answer()
        update.callback_query.edit_message_text(text='‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.')
    else:
        update.message.reply_text('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END


def main() -> None:
    updater = Updater("–í–ê–® –¢–û–ö–ï–ù")  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –æ—Ç @BotFather
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REMINDER_TEXT: [MessageHandler(Filters.text & ~Filters.command, get_reminder_text)],
            TIME_SELECTION: [
                CallbackQueryHandler(time_selection),
                MessageHandler(Filters.text & ~Filters.command, manual_time_input)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    dispatcher.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
